Import('env')
import os

# LIBPATH and LIBS need to be set on the real "env" (not the clone)
# to link the specified libraries to the Godot executable.

# This is a path relative to /modules/tts/ where your .a libraries reside.
# If you are compiling the module externally (not in the godot source tree),
# these will need to be full paths.

env.Append(LIBPATH=['thirdparty/sqlite'])

import inspect
src_file_path = inspect.getfile(lambda: None)
src_folder_path = os.path.dirname(src_file_path)

module_env = env.Clone()
module_env.Append(CPPDEFINES=[('SQLITE_ENABLE_RBU', 1)])
module_env.Append(CPPDEFINES=[('SQLITE_USE_URI', 1)])
module_env.Append(CPPDEFINES=["SQLITE_ENABLE_JSON1"])
env.Append(LIBS=['mvsqlite'])

import subprocess
old_cwd = os.getcwd()
os.chdir("thirdparty/mvsqlite")
if env["platform"] == "windows":
    env.Append(LIBPATH=[src_folder_path + '/thirdparty/mvsqlite/target/x86_64-pc-windows-gnu/release'])
    import platform as python_platform
    env.Append(LIBPATH=['C:/Users/ernes/scoop/apps/openssl-mingw/current/lib64'])
    if python_platform.system() == "Linux":
        env.ParseConfig("mingw64-pkg-config --libs --static libcrypto")
        env.ParseConfig("mingw64-pkg-config --libs --static libssl")
    env.Append(LIBS=['ws2_32', 'bcrypt', 'userenv', 'ntdll'])
    subprocess.check_call(["cargo", "build", "--target", "x86_64-pc-windows-gnu", "--release", "--package", "mvsqlite"])
elif env["platform"] == "linuxbsd":
    env.Append(LIBPATH=[src_folder_path + '/thirdparty/mvsqlite/target/x86_64-unknown-linux-gnu/release'])
    subprocess.check_call(["cargo", "build", "--target", "x86_64-unknown-linux-gnu", "--release", "--package", "mvsqlite"])
    env.Append(LIBS=['pthread', 'm', 'dl'])
elif env["platform"] == "ios":
    env.Append(LIBPATH=[src_folder_path + '/thirdparty/mvsqlite/target/apple-ios/release'])
    subprocess.check_call(["cargo", "build", "--target", "apple-ios", "--release", "--package", "mvsqlite"])
elif env["platform"] == "macos":
    env.Append(LIBPATH=[src_folder_path + '/thirdparty/mvsqlite/target/x86_64-apple-darwin/release'])
    subprocess.check_call(["cargo", "build", "--target", "x86_64-apple-darwin", "--release", "--package", "mvsqlite"])
os.chdir(old_cwd)
env.Append(LIBS=['crypto'])

env_thirdparty = module_env.Clone()
env_thirdparty.disable_warnings()
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/mvsqslite/mvsqlite-sqlite3/*.c")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/spmemvfs/*.c")

module_env.add_source_files(env.modules_sources, "*.cpp")